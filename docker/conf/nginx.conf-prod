user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections  4096;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    types_hash_max_size 2048;
    server_tokens on;
    keepalive_timeout 60;
    client_max_body_size 16M;
    client_body_buffer_size 128k;
    gzip  on;
    gzip_disable "msie6";
    gzip_comp_level 1;
    gzip_proxied any;
    gzip_min_length 256;
    gzip_types text/plain text/css text/xml application/json application/x-javascript application/javascript application/xml application/xml+rss text/javascript;
    open_file_cache max=65000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        root /app/web_root;
        index index.html index.htm;
        location ~* (service-worker\.js)$ {
            if ($http_x_forwarded_proto != "https") { return 301 https://$host$request_uri; }
            try_files $uri =404;
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
        }
        location / {
            if ($http_x_forwarded_proto != "https") { return 301 https://$host$request_uri; }
            try_files $uri /index.html;
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires off;
        }
        location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
            if ($http_x_forwarded_proto != "https") { return 301 https://$host$request_uri; }
            expires 6h;
        }
        location = /robots.txt {
            allow all;
            access_log off;
        }
        location = /health {
            return 200;
            access_log off;
        }
    }
}
